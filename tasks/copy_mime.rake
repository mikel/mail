# Whenever a new version of mime-types is released, this should be
# updated and the copy_mime_data task rerun to rebuild the internal cache.
mime_types_version = '2.4.3'

desc "Copy data from mime_types gem (last run for #{mime_types_version})"
task :copy_mime_data do
  # The reason for this task is that mime/types has a large memory footprint,
  # but mail only uses a small portion of mime/types.  This extracts only the
  # necessary data from mime/types that mail uses, reducing the amount of
  # memory used by 2/3.
  #
  # This task is designed to be idempotent, so running it multiple
  # times should not have an effect.  So as long as you have installed the
  # most recent mime-types version, it should be safe to run this.
  #
  # The 2/3 reduction in memory was taken from these numbers:
  #
  # ruby RSS in KB:
  # without require mail: 6204
  # with require mail, using mime-types gem: 28860
  # with require mail, using internal mime type implementation: 14452

  gem 'mime-types', mime_types_version
  require 'mime/types'

  caches = {}
  types = MIME::Types.send(:__types__)

  # Both of these are hashes inside MIME::Types.
  # For both, values are arrays of MIME::Type instances.
  # @extension_index is keyed by file extension.
  # @type_variants is keyed by content type.
  cache_types = [:@extension_index, :@type_variants]

  cache_types.each do |cache_type|
    h = caches[cache_type] = {}
    types.instance_variable_get(cache_type).each do |type_key, mime_types|
      # Mail always uses the preferred type, so only keep that one.
      h[type_key] = mime_types.sort{|a, b| a.priority_compare(b)}.first
    end
  end

  File.open("lib/mail/mime_type/cache.rb", 'wb') do |f|
    f.puts "# This file was generated by the copy_mime_data rake task, using mime-types version #{mime_types_version},"
    f.puts "# it should not be modified directly."
    f.puts ''
    f.puts 'class Mail::MimeType'
    cache_types.each do |cache_type|
      f.puts "  #{cache_type} = {"
      caches[cache_type].sort.map do |type_key, mime_type|
        f.puts "    #{type_key.inspect} => #{'Binary.' if mime_type.binary?}new(#{mime_type.to_s.inspect}),"
      end
      f.puts "  }"
    end
    f.puts 'end'
  end
end

